import bb.cascades 1.0

// The root container for the custom component
Container {
    layout: StackLayout {
        orientation: LayoutOrientation.LeftToRight
    }
    
    Container {
        layout: StackLayout {
            orientation: LayoutOrientation.LeftToRight
        }
        
	    Container {
	    			    
		    layout: StackLayout {
		        orientation: LayoutOrientation.TopToBottom
		    }
		    
		    // An ImageButton
			ImageButton {
			    id: albumButton
			    defaultImageSource: "asset:///images/menu/Album.png"
			    pressedImageSource: "asset:///images/menu/Album.png"
			    disabledImageSource: "asset:///images/menu/Album.png"
			    enabled: true
			    verticalAlignment: VerticalAlignment.Center
		        horizontalAlignment: HorizontalAlignment.Center
			    
			    onClicked: {
			    }
	            leftMargin: 5.0
	            rightMargin: 5.0
	            topMargin: 5.0
	            bottomMargin: 5.0
	        }// ImageButton
			
			// An ImageButton
			ImageButton {
			    id: notificationButton
			    defaultImageSource: "asset:///images/menu/Notifications.png"
			    pressedImageSource: "asset:///images/menu/Notifications.png"
			    disabledImageSource: "asset:///images/menu/Notifications.png"
			    enabled: true
			    verticalAlignment: VerticalAlignment.Center
		        horizontalAlignment: HorizontalAlignment.Center
			    
			    onClicked: {
			    }
			    
			    leftMargin: 5.0
	            rightMargin: 5.0
	            topMargin: 5.0
	            bottomMargin: 5.0
			}// ImageButton
			
			// An ImageButton
			ImageButton {
			    id: inviteButton
			    defaultImageSource: "asset:///images/menu/Invite.png"
			    pressedImageSource: "asset:///images/menu/Invite.png"
			    disabledImageSource: "asset:///images/menu/Invite.png"
			    enabled: true
			    verticalAlignment: VerticalAlignment.Center
		        horizontalAlignment: HorizontalAlignment.Center
			    
			    onClicked: {
			    }
			    
			    leftMargin: 5.0
	            rightMargin: 5.0
	            topMargin: 5.0
	            bottomMargin: 5.0
			}// ImageButton
		}
		
		Container {
		    			    
		    layout: StackLayout {
		        orientation: LayoutOrientation.TopToBottom
		    }
		    
		    // An ImageButton
			ImageButton {
			    id: shopButton
			    defaultImageSource: "asset:///images/menu/Shop.png"
			    pressedImageSource: "asset:///images/menu/Shop.png"
			    disabledImageSource: "asset:///images/menu/Shop.png"
			    enabled: true
			    verticalAlignment: VerticalAlignment.Center
		        horizontalAlignment: HorizontalAlignment.Center
			    
			    onClicked: {
			    }
			    
			    leftMargin: 5.0
	            rightMargin: 5.0
	            topMargin: 5.0
	            bottomMargin: 5.0
		    }// ImageButton
		    
		    // An ImageButton
			ImageButton {
			    id: creditsButton
			    defaultImageSource: "asset:///images/menu/Credits.png"
			    pressedImageSource: "asset:///images/menu/Credits.png"
			    disabledImageSource: "asset:///images/menu/Credits.png"
			    enabled: true
			    verticalAlignment: VerticalAlignment.Center
		        horizontalAlignment: HorizontalAlignment.Center
			    
			    onClicked: {
			    }
			    
			    leftMargin: 5.0
	            rightMargin: 5.0
	            topMargin: 5.0
	            bottomMargin: 5.0
			}// ImageButton
			
			// An ImageButton
			ImageButton {
			    id: redeemButton
			    defaultImageSource: "asset:///images/menu/Redeem.png"
			    pressedImageSource: "asset:///images/menu/Redeem.png"
			    disabledImageSource: "asset:///images/menu/Redeem.png"
			    enabled: true
			    verticalAlignment: VerticalAlignment.Center
		        horizontalAlignment: HorizontalAlignment.Center
			    
			    onClicked: {
			    }
			    
			    leftMargin: 5.0
	            rightMargin: 5.0
	            topMargin: 5.0
	            bottomMargin: 5.0
			}// ImageButton
		}
		
		Container {
			    			    
		    layout: StackLayout {
		        orientation: LayoutOrientation.TopToBottom
		    }
		    
		    // An ImageButton
			ImageButton {
			    id: auctionButton
			    defaultImageSource: "asset:///images/menu/Auctions.png"
			    pressedImageSource: "asset:///images/menu/Auctions.png"
			    disabledImageSource: "asset:///images/menu/Auctions.png"
			    enabled: true
			    verticalAlignment: VerticalAlignment.Center
		        horizontalAlignment: HorizontalAlignment.Center
			    
			    onClicked: {
			    }
			    
			    leftMargin: 5.0
	            rightMargin: 5.0
	            topMargin: 5.0
	            bottomMargin: 5.0
		    }// ImageButton
		    
		    // An ImageButton
			ImageButton {
			    id: friendsButton
			    defaultImageSource: "asset:///images/menu/Friends.png"
			    pressedImageSource: "asset:///images/menu/Friends.png"
			    disabledImageSource: "asset:///images/menu/Friends.png"
			    enabled: true
			    verticalAlignment: VerticalAlignment.Center
		        horizontalAlignment: HorizontalAlignment.Center
			    
			    onClicked: {
			    }
			    
			    leftMargin: 5.0
	            rightMargin: 5.0
	            topMargin: 5.0
	            bottomMargin: 5.0
			}// ImageButton
			
			// An ImageButton
			ImageButton {
			    id: exitButton
			    defaultImageSource: "asset:///images/menu/exit.png"
			    pressedImageSource: "asset:///images/menu/exit.png"
			    disabledImageSource: "asset:///images/menu/exit.png"
			    enabled: true
			    verticalAlignment: VerticalAlignment.Center
		        horizontalAlignment: HorizontalAlignment.Center
			    
			    onClicked: {
			        testSheet.open()
			    }
			    
			    leftMargin: 5.0
	            rightMargin: 5.0
	            topMargin: 5.0
	            bottomMargin: 5.0
			}// ImageButton
		}
	}
	
	Container {
	    visible: false
	    
	    ListView {
            dataModel: XmlDataModel {
                source: "models/items.xml"
            }
              
            // Use a ListItemComponent to determine which property in the
            // data model is displayed for each list item
            listItemComponents: [
                ListItemComponent {
                    type: "listItem"
                      
                    StandardListItem {
                        // Display the value of an item's title property
                        // in the list
                        title: ListItemData.title
                    }
                }
            ]
   
            // When an item is selected, update the text in the TextField
            // to display the status of the new item
            onTriggered: {
                var selectedItem = dataModel.data(indexPath);
                textField.text = selectedItem.status;
            }
        }
    }
    
    scaleX: 1
    scaleY: 1
    
    attachedObjects: [
        Sheet {
            id: testSheet
            
            Page {
                id: sheetPage
                
                signal cancel ()
                
                titleBar: TitleBar {
                    id: addBar
                    title: "Test Sheet"
                    visibility: ChromeVisibility.Visible
                    
                    acceptAction: ActionItem {
                        title: "Back"
                        onTriggered: {
                            sheetPage.cancel();
                        }
                    }
                }
                
                onCancel: {
                    testSheet.close();
                }
            }
        }
    ]
} // End of the root container